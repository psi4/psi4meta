{% set name = "psi4" %}
{% set version = "1.8a4" %}
{% set commit = "5e3de4b18" %}
{% set sha256 = "03dac1baa36bb99750e6dc2ade7552679e14a0397d32a39f445f9f495c860117" %}

# versioning: want conda package and `psi4 --version` to match
# * proper tagged releases compute their versions consistent with recipe w/o interventions.
#   so comment out the "echo ... metadata.py" cmds in build.sh and bld.bat. ("commit" var here also disposable.)
# * to package _any_ commit, set it to "commit" jinja, set "version" jinja to a fake prerelease tag, and let the "echo ... metadata.py" machinery work.
#   note that the non-c-f recipe didn't need this machinery b/c it used source/git_url and load_setup_py_data.

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/{{ name }}/{{ name }}/archive/{{ commit }}.tar.gz
    # url: https://github.com/{{ name }}/{{ name }}/archive/v{{ version }}.tar.gz
    sha256: {{ sha256 }}
  - url: https://github.com/psi4/iomp5md/archive/31b4ccb.tar.gz               # [win]
    sha256: d9c6ad3976183f54b676335885d8557d67ca7b25ac4115b91b4cc42281d95f7c  # [win]
    folder: external_src                                                      # [win]

build:
  number: 0
  skip: true  # [py != 310]
  script_env:
    - PSI4_PRETEND_VERSIONLONG={{ version }}+{{ commit }}
  binary_relocation: true
  run_exports:
    # only relevant for the rare "psi4 plugin" case (links to psi4/core.*so), not the usual "psi4 module" case (import psi4)
    - {{ pin_subpackage('psi4', max_pin='x.x') }}
  ignore_run_exports:
    - libint
    - numpy

# bkgd: the libint story
# * this recipe is using a libint dev package for reasons at https://github.com/conda-forge/libint-feedstock/issues/15
# * libint_dev pkg has a run_exports `x`, which is true for the package in general
# * but since API is not finalized, it's prudent for now to pin req/run to exact, hence the ignore_run_exports above

# bkgd: the numpy story
# * psi4 uses numpy at runtime and has no version constraints
# * it should be around at compile-time for `find_package(Python ... NumPy)`
# * this doesn't need to be explicit for most arch but does for osx-arm64 for cross-compile
# * to avoid false numpy matrix, add it to ignore_run_exports

# bkgd: the fortran story
# * psi4 has no fortran code and no fortran required dependencies (besides blas/lapack)
# * it does have optional functionality-expanding fortran dependencies like dkh (recipe alongside) that are packaged separately
# * this recipe omits the fortran compiler since C++ compiler can do the linking and because on windows,
#   the clang-cl + gfortran combination hits https://gitlab.kitware.com/cmake/cmake/-/issues/17810

# bkgd: the general blas story
# * psi4's performance is heavily dependent on the blas/lapack implementation
# * we've been packaging on conda with mkl for the past 7y
# * while the psi4 build system allows any blas impl, we emit "untested" warnings for non-MKL, and the last test of openblas 5y ago had threading oversubscriptions
# * so while we're open to multiple impl in future and have been specifying generic "libblas" in deps like dkh, we'd like to support only mkl in psi4 for now

# bkgd: the windows blas story
# * the latest blas+win+mkl package (libblas-3.9.0-16_win64_mkl) depends on mkl=2022.1.0, even though mkl=2022.2 and 2023.0 are available.
# * so the `{{ mkl }}  # [win]` below pins to 2022.1.0 so that libblas=*=*mkl can work correctly to set the blas implementation.
# * without the `{{ mkl }}` pin, various attempts would either install mkl + openblas + libblas=*=*openblas or try to fall back to libblas==3.8.0=10_mkl
# * current conda-forge-pinning is mkl=mkl-devel=2022, so hopefully this recipe is still consistent with the c-f stack.

# bkgd: the windows openmp story
# * the windows mkl package depends on intel-openmp (provides libiomp5md.dll).
# * llvm-openmp is another contender on windows (provides libomp.dll=libiomp5md.dll and assoc. import libs libomp.lib=libiomp5md.lib).
# * intel-openmp libiomp5md.dll is twice the size of the llvm-openmp file of the same name, and there's reports of non-interchangeability:
#   * https://github.com/conda-forge/conda-forge.github.io/issues/1597#issuecomment-1029224521
#   * https://github.com/conda-forge/intel_repack-feedstock/issues/1#issuecomment-579975070
# * so we'd like to keep depending on intel-openmp, but since the package only provides the runtime dll,
#   not the buildtime import lib, we stash a copy of the latter in a repo (see 2nd source/url above)
#   for compiling psi4. It is used at buildtime and never packaged.
# * for threading on windows, we're certainly willing for the psi4 recipe to do whatever works well with the c-f stack.
#   However, at the moment this aspect of the stack seems a little fractured, so the recipe is defaulting to the
#   mkl + intel-openmp + stashed libiomp5md.lib procedure that has worked compatibly with c-f for the last couple years.

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - make                                   # [unix]
    - ninja                                  # [win]
    - llvm-openmp                            # [unix]
  host:
    - eigen
    - boost-cpp
    - mkl-devel                              # [x86_64 and unix]
    - mkl-devel {{ mkl }}                    # [x86_64 and win]
    - mkl                                    # [x86_64 and unix]
    - mkl {{ mkl }}                          # [x86_64 and win]
    - libblas * *netlib                      # [not x86_64]
    - liblapack * *netlib                    # [not x86_64]
    - numpy
    - pybind11
    - pybind11-abi
    - python
    # qc req'd
    - gau2grid
    #- libint 2.7.3dev1
    - libint2 2.7.2 h2fe1556_1
    - libxc-c
    - optking
    - qcelemental
    - qcengine
    # qc opt'l, build-time
    - dkh
  run:
    - llvm-openmp                            # [unix]
    - intel-openmp                           # [win]
    - libblas * *mkl                         # [x86_64]
    - mkl                                    # [x86_64 and unix]
    - mkl {{ mkl }}                          # [x86_64 and win]
    - libblas                                # [not x86_64]
    - liblapack                              # [not x86_64]
    - msgpack-python
    - networkx
    - numpy
    - python
    - scipy
    # qc
    #- libint 2.7.3dev1                                 # 2.7.3dev1 provides rt-switchable ordering (src) and derivative integrals (build)
    - libint2 2.7.2 h2fe1556_1
    - {{ pin_compatible('optking', max_pin='x.x') }}
    - {{ pin_compatible('qcelemental', max_pin='x.x') }}
    - {{ pin_compatible('qcengine', max_pin='x.x') }}
  run_constrained:
    - pytest >=7.0.1
    # qc opt'l, run-time
    - pylibefp ==0.6.2                                 # 0.6.2 provides windows arch
      # - dftd4-python >=3.5.0                         # 3.5.0 provides b97-3c parameters
    - geometric >=1.0                                  # 1.0 has new API
    - pymdi >=1.2                                      # 1.2 has breaking API change
    - pyddx >=0.4.1                                    # 0.4.1 has lpb correction
    - adcc >=0.15.16                                   # 0.15.16 has transition moment corrections

test:
  imports:
    - psi4
  requires:
    - pip                                                                          # provides `pip check`
    - pytest
    - pytest-xdist
    - m2w64-binutils                                                     # [win]   # provides objdump.exe
    # qc runtime opt'l
    - adcc                                                               # [unix]
    - cppe                                                               # [unix]
    - pyddx                                                              # [unix]
    - dftd3-python
    - dftd4-python
    - toml                                                                         # needed for qcengine/dftd4-python interface
    - pylibefp
    - gcp-correction
    - geometric
    - pymdi
  commands:
    - ls -l $PREFIX/lib                                                  # [unix]
    - ls -l $PREFIX/share/cmake/psi4                                     # [unix]
    - ls -l $SP_DIR/psi4                                                 # [unix]
    - dir %PREFIX%\\Library\\lib                                         # [win]
    - dir %PREFIX%\\Library\\share\\cmake\\psi4                          # [win]
    - dir %SP_DIR%\\psi4                                                 # [win]
    # Verify module
    - test -f $SP_DIR/psi4/core*.so                                      # [unix]
    - test -f $SP_DIR/psi4/driver/driver.py                              # [unix]
    - if not exist %SP_DIR%\\psi4\\core*.pyd exit 1                      # [win]
    - if not exist %SP_DIR%\\psi4\\driver\\driver.py exit 1              # [win]
    # Verify executable
    - test -f $PREFIX/bin/psi4                                           # [unix]
    - psi4 --version                                                     # [unix]
    - psi4 --module                                                      # [unix]
    - if exist %PREFIX%\\Scripts\\psi4 exit 1                            # [win]
    - if not exist %PREFIX%\\Scripts\\psi4-script.py exit 1              # [win]   # aka bin/psi4
    - if not exist %PREFIX%\\Scripts\\psi4.exe exit 1                    # [win]
    - psi4.exe --version                                                 # [win]
    - psi4.exe --module                                                  # [win]
    - python -c "import psi4;print(psi4.executable)"
    # Verify accessories
    - test -f $PREFIX/include/psi4/psi4-dec.h                            # [unix]
    - test -f $PREFIX/share/cmake/psi4/psi4Config.cmake                  # [unix]
    - test -f $PREFIX/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake  # [unix]
    - test -f $PREFIX/share/psi4/basis/cc-pvdz.gbs                       # [unix]
    - if not exist %PREFIX%\\Library\\include\\psi4\\psi4-dec.h exit 1   # [win]
    - if not exist %PREFIX%\\Library\\share\\cmake\\psi4\\psi4Config.cmake exit 1  # [win]
    - if not exist %PREFIX%\\Library\\share\\cmake\\TargetLAPACK\\TargetLAPACKConfig.cmake exit 1  # [win]
    - if not exist %PREFIX%\\Library\\share\\psi4\\basis\\cc-pvdz.gbs exit 1  # [win]
    # Inspect linkage
    - ldd -v $SP_DIR/psi4/core*.so                                       # [linux]
    - otool -L $SP_DIR/psi4/core*.so                                     # [osx]
    - objdump.exe -p %SP_DIR%\\psi4\\core.*.pyd | findstr /i "dll"       # [win]
    # Actually test
    - pip check
    - python -c "import psi4;assert psi4.__version__ == '{{ version }}', f'{psi4.__version__=} differs from recipe=\'{{ version }}\''"
    - python -c "from psi4 import core; core.set_num_threads(42); assert core.get_num_threads() == 42"
    - python -c "import psi4;print(psi4.addons())"
    - MKL_CBWR=AVX pytest -rws -v --durations=100 --durations-min 60.0 --color yes -n auto $SP_DIR/psi4 -k "not (large and freq)"  # [linux]
    #- MKL_CBWR=AVX pytest -rws -v --durations=20 --color yes -n auto $SP_DIR/psi4 -m "smoke"  # [unix]
    - pytest -rws -v --durations=20 --color yes -n auto %SP_DIR%\\psi4 -m "smoke and not d2ints"  # [win]
    #- grep -r theoryfs2 $PREFIX/share/cmake/ || true  # [linux]
    #- python $PREFIX/share/psi4/scripts/test_threading.py --passfail --ldd
    #- python $PREFIX/share/psi4/scripts/test_threading.py --passfail --psiapi -n6
    #- python $PREFIX/share/psi4/scripts/test_threading.py --passfail --psithon -n6

about:
  home: http://psicode.org
  dev_url: https://github.com/psi4/psi4
  doc_url: http://psicode.org/psi4manual/master/index.html
  doc_source_url: https://github.com/psi4/psi4/tree/master/doc/sphinxman/source
  license: LGPL-3.0-only AND BSD-3-Clause AND MIT
  license_url: https://opensource.org/license/lgpl-3-0/
  license_file:
    - COPYING
    - COPYING.LESSER
    - THIRD-PARTY-LICENSES
  license_family: LGPL
  summary: "Open-Source Quantum Chemistry - an electronic structure package in C++ driven by Python"
  description: |
    Psi4 is an open-source suite of ab initio quantum chemistry programs designed for efficient,
    high-accuracy simulations of a variety of molecular properties. We can routinely perform computations
    with more than 2500 basis functions running serially or on multi-core machines. With computationally
    demanding portions written in C++, Pybind11 exports many of the C++ classes into Python, and a
    flexible Python driver, Psi4 strives to be friendly to both users and developers.

extra:
  recipe-maintainers:
    - loriab
    - jturney
    - fevangelista


# Notes
# -----

# * The following optional runtime deps were in req/run of the psi4::psi4 package but are omitted from conda-forge::psi4
#   * pytest
#   * dftd3
#   * gcp
#   * dftd4 (installer only)
